function [N, Val] = get_cc_avg_stats(Stats, LocIdx, field, cc_type, output_type)
% Returns summary statistics of the structure list 'Stats' that was generated
% using 'conncomp_stats()'.
% Inputs: Stats - structure list generated by 'conncomp_stats()'
%         LocIdx - location labels of the connected components (CC) that should be
%                  included in the statistics, or empty for all labels
%         field - the field of the structure list, or empty for the count of
%                 connected components
%         cc_type - Either 'inter' for just selecting interslice CC, 
%                   'intra' for just selecting intraslice CC, or empty
%                   for all
%         output_type - Either 'median' for the median value, 'sum' for the sum
%                       of all values or empty for a vector containing all values
%                       from the CC.
% Ouputs: N - Number of CC that were considered for stats
%         Val - Either a single value or vector depending on 'output_type'
%

N = zeros(length(Stats), 1);
Val = cell(length(Stats), 1);
for idx = 1:length(Stats)
    CC = Stats{idx};
    Val_tmp = nan(length(CC), 1);
    for cc_idx = 1:length(CC)
        switch cc_type
            case 'inter'
                type_flag = isfield(CC(cc_idx), 'nsl') && CC(cc_idx).nsl > 1;
            case 'intra'
                type_flag = isfield(CC(cc_idx), 'nsl') && CC(cc_idx).nsl <= 1;
            otherwise
                type_flag = true;
        end
        if (isempty(LocIdx) || sum(ismember(CC(cc_idx).loc, LocIdx)) > 0) && type_flag
            if ~isempty(field)
                Val_tmp(cc_idx) = CC(cc_idx).(field);
            end
            N(idx) = N(idx) + 1;
        end
    end
    Val_tmp(isnan(Val_tmp)) = [];
    switch output_type
        case 'median'
            Val{idx} = median(Val_tmp);
        case 'sum'
            Val{idx} = sum(Val_tmp);
        otherwise
            if ~isempty(Val_tmp)
                Val{idx} = Val_tmp;
            end
    end
end
